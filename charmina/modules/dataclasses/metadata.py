# generated by datamodel-codegen:
#   filename:  metadata_template.yml
#   timestamp: 2024-06-05T19:44:56+00:00

# from __future__ import annotations

from dataclasses import dataclass
import os
import re
from datafiles import datafile, formats

from charmina.modules.dataclasses.transform_config import TransformConfig


METADATA_FILE_EXTENSION = ".meta.yml"
formats.register(METADATA_FILE_EXTENSION, formats.YAML)

SAFE_METADATA_MAX_LENGTH = 500
FRONT_MATTER_SUB_REGEX = r"\.\s*"


@dataclass
class Metadata:
    type: str = ""
    title: str = ""
    author: str = ""
    publish_date: str = ""
    description: str = ""
    url: str = ""
    source_id: str = ""
    source_type: str = ""
    language: str = "en"
    tags: str = ""
    length: str = ""
    rating: str = ""
    channel: str = ""
    album: str = ""
    license: str = ""

    """
    Get a dictionary with the first line of each field value
    """

    def get_front_matter_ready_dict(self):
        safe_dict = {}
        for field_key in self.__dataclass_fields__.keys():
            field_value = getattr(self, field_key)
            if field_value:
                # Replace any sequence of a dot + spaces or new lines with a dot + single space
                field_value = re.sub(FRONT_MATTER_SUB_REGEX, ". ", field_value)
                field_value = (
                    field_value
                    if len(field_value) < SAFE_METADATA_MAX_LENGTH
                    else field_value[:SAFE_METADATA_MAX_LENGTH] + "..."
                )
                safe_dict[field_key] = field_value

        return safe_dict


@datafile(f"{{self.source_path}}{METADATA_FILE_EXTENSION}", manual=True, defaults=True)
@dataclass(kw_only=True)
class MetadataDataFile:
    source_path: str
    metadata: Metadata = None
    transform_config: TransformConfig = None

    def __post_init__(self):
        # Convert to absolute path (avoid issues with datafile pattern and relative paths)
        # Remove duplicated extension if necessary
        self.source_path = os.path.abspath(
            self.source_path[: -len(METADATA_FILE_EXTENSION)]
            if self.source_path.endswith(METADATA_FILE_EXTENSION)
            else self.source_path
        )
